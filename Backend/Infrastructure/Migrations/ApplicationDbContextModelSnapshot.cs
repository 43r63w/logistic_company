// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.DbSets.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Home Appliances"
                        });
                });

            modelBuilder.Entity("Domain.DbSets.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_title");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.HasKey("Id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Tech Street",
                            City = "Techville",
                            CompanyName = "Tech Solutions",
                            ContactName = "Alice Johnson",
                            ContactTitle = "CEO",
                            Country = "USA",
                            PhoneNumber = "1234567890",
                            PostalCode = "12345"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Design Avenue",
                            City = "Design City",
                            CompanyName = "Innovative Designs",
                            ContactName = "Bob Smith",
                            ContactTitle = "CTO",
                            Country = "USA",
                            PhoneNumber = "0987654321",
                            PostalCode = "67890"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Trade Road",
                            City = "Trade Town",
                            CompanyName = "Global Trading",
                            ContactName = "Carol White",
                            ContactTitle = "CFO",
                            Country = "Canada",
                            PhoneNumber = "3216549870",
                            PostalCode = "54321"
                        });
                });

            modelBuilder.Entity("Domain.DbSets.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric")
                        .HasColumnName("budget");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 500000.00m,
                            Name = "Operations"
                        },
                        new
                        {
                            Id = 2,
                            Budget = 300000.00m,
                            Name = "Sales"
                        },
                        new
                        {
                            Id = 3,
                            Budget = 150000.00m,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 4,
                            Budget = 200000.00m,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 5,
                            Budget = 100000.00m,
                            Name = "Customer Service"
                        });
                });

            modelBuilder.Entity("Domain.DbSets.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InfoAboutEmploymentId")
                        .HasColumnType("integer")
                        .HasColumnName("info_about_employment");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sur_name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InfoAboutEmploymentId");

                    b.ToTable("employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Tech Street",
                            City = "Techville",
                            DateOfBirth = new DateTimeOffset(new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            DepartmentId = 1,
                            Description = "Experienced logistics manager",
                            FirstName = "John",
                            HireDate = new DateTimeOffset(new DateTime(2010, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ImageUrl = "https://example.com/image1.jpg",
                            InfoAboutEmploymentId = 1,
                            LastName = "Doe",
                            PhoneNumber = "+380123456789",
                            SurName = "M",
                            Title = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Design Avenue",
                            City = "Design City",
                            DateOfBirth = new DateTimeOffset(new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            DepartmentId = 2,
                            Description = "Top performer in sales",
                            FirstName = "Jane",
                            HireDate = new DateTimeOffset(new DateTime(2015, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ImageUrl = "https://example.com/image2.jpg",
                            InfoAboutEmploymentId = 2,
                            LastName = "Smith",
                            PhoneNumber = "+380987654321",
                            SurName = "A",
                            Title = "Sales Representative"
                        });
                });

            modelBuilder.Entity("Domain.DbSets.InfoAboutEmployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<string>("WorkIdentifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("work_identifier");

                    b.HasKey("Id");

                    b.ToTable("info_about_employment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Salary = 55000m,
                            WorkIdentifier = "08c2042b-d009-41f6-b82b-43e7dad39391"
                        },
                        new
                        {
                            Id = 2,
                            Salary = 45000m,
                            WorkIdentifier = "239a9e69-9780-4c41-a6d5-a935f9bbd2ac"
                        });
                });

            modelBuilder.Entity("Domain.DbSets.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityOfDelivery")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_of_delivery");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_address");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_postal_code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("order_price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTimeOffset>("ShippedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shipped_date");

                    b.Property<string>("VehicelsType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicels_type");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Domain.DbSets.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDiscount")
                        .HasColumnType("boolean")
                        .HasColumnName("is_discount");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<byte>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("Domain.DbSets.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<bool>("IsDiscount")
                        .HasColumnType("boolean")
                        .HasColumnName("is_discount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.Property<decimal>("PriceWithDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("price_with_discount");

                    b.Property<string>("QuantityPerUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quantity_per_unit");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("sub_category_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsDiscount = false,
                            Name = "iPhone 15 Pro Max",
                            Price = 999.99m,
                            PriceWithDiscount = 0m,
                            QuantityPerUnit = "15 unit",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsDiscount = true,
                            Name = "Samsung Galaxy S24",
                            Price = 899.99m,
                            PriceWithDiscount = 0m,
                            QuantityPerUnit = "5 unit",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsDiscount = false,
                            Name = "Dell XPS",
                            Price = 1199.99m,
                            PriceWithDiscount = 0m,
                            QuantityPerUnit = "2 boxes",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsDiscount = true,
                            Name = "Whirlpool Refrigerator",
                            Price = 499.99m,
                            PriceWithDiscount = 0m,
                            QuantityPerUnit = "12 unit",
                            SubCategoryId = 3
                        });
                });

            modelBuilder.Entity("Domain.DbSets.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BanType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ban_type");

                    b.Property<DateTimeOffset>("ExpiresDateRestriction")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_date_restriction");

                    b.Property<string>("RestrictionDetail")
                        .HasColumnType("text")
                        .HasColumnName("restriction_detail");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("restrictions");
                });

            modelBuilder.Entity("Domain.DbSets.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sub_category_name");

                    b.HasKey("Id");

                    b.ToTable("subs_category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubCategoryName = "Smartphones"
                        },
                        new
                        {
                            Id = 2,
                            SubCategoryName = "Laptops"
                        },
                        new
                        {
                            Id = 3,
                            SubCategoryName = "Refrigerators"
                        });
                });

            modelBuilder.Entity("Domain.DbSets.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsHaveBan")
                        .HasColumnType("boolean")
                        .HasColumnName("is_have_ban");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Domain.DbSets.Employee", b =>
                {
                    b.HasOne("Domain.DbSets.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DbSets.InfoAboutEmployment", "InfoAboutEmployment")
                        .WithMany()
                        .HasForeignKey("InfoAboutEmploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("InfoAboutEmployment");
                });

            modelBuilder.Entity("Domain.DbSets.Order", b =>
                {
                    b.HasOne("Domain.DbSets.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DbSets.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DbSets.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.DbSets.OrderDetails", b =>
                {
                    b.HasOne("Domain.DbSets.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DbSets.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.DbSets.Product", b =>
                {
                    b.HasOne("Domain.DbSets.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DbSets.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Domain.DbSets.Restriction", b =>
                {
                    b.HasOne("Domain.DbSets.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DbSets.User", b =>
                {
                    b.HasOne("Domain.DbSets.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.DbSets.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.DbSets.Employee", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
